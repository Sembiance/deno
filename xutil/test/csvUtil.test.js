import {assertStrictEquals, assertEquals, path, base64Encode} from "std";
import * as csvUtil from "../csvUtil.js";
import {fileUtil} from "xutil";

Deno.test("parseCSV1", async () =>
{
	const raw = await fileUtil.readTextFile(path.join(import.meta.dirname, "files", "test1.csv"));
	assertStrictEquals(base64Encode(JSON.stringify(csvUtil.parse(raw))), "");

	assertStrictEquals(base64Encode(JSON.stringify(csvUtil.parse(raw, {colidMapper : v => v.toProperCase()}))), "");

	const {colids, entries} = csvUtil.parse(raw, {colidMapper : v => v.toProperCase(), returnColids : true});
	assertEquals(colids, ["Index", "Status", "Zh"]);
	assertStrictEquals(entries.length, 100);
});

Deno.test("parseCSV2", async () =>
{
	const raw = await fileUtil.readTextFile(path.join(import.meta.dirname, "files", "test2.csv"));
	assertStrictEquals(base64Encode(JSON.stringify(csvUtil.parse(raw))), "W3siaWQiOiIxNjQ4IiwiYWZmaXhfZWZmZWN0cyI6IjEiLCJzY29wZSI6IjAiLCJkZXNjcmlwdGlvbiI6ImFmZml4X2NsYXNzfGRlc2NyaXB0aW9ufDE2NDgiLCJkZXRhaWxfZGVzY3JpcHRpb24iOiIiLCJwYXJhbWV0ZXJfYWJzdHJhY3QiOiJQMSwwfFAyLDAiLCJwYXJhbWV0ZXJfZXh0cmEiOiJbe1wibmFtZVwiOlwiUDFcIixcInR5cGVcIjpcImZsb2F0XCIsXCJtZXRhRGF0YVwiOntcInVuc3RhY2thYmxlXCI6XCJcIixcImZyYWN0aW9uYWxEaWdpdHNcIjpcIjNcIn19LHtcIm5hbWVcIjpcIlAyXCIsXCJ0eXBlXCI6XCJmbG9hdFwiLFwibWV0YURhdGFcIjp7XCJ1bnN0YWNrYWJsZVwiOlwiXCIsXCJmcmFjdGlvbmFsRGlnaXRzXCI6XCIzXCJ9fV0iLCJyb3dfbmFtZSI6IjhCOUZGNzE0NERCQUI5NkQzN0Q3OEQ4NUU2NzA2OTQwIn1d");
});

Deno.test("parseCSV3", async () =>
{
	const raw = await fileUtil.readTextFile(path.join(import.meta.dirname, "files", "test3.csv"));
	assertStrictEquals(base64Encode(JSON.stringify(csvUtil.parse(raw))), "W3siaWQiOiIxNCIsInN0ciI6Ilt7XCJuYW1lXCI6XCJQMVwiLFwidHlwZVwiIiwic3VmZml4IjoiOTkifSx7ImlkIjoiNDciLCJzdHIiOiJkb3VibGVcIlwicXVcIixcIm90ZWRcIlwiLFwiXCJjb21tYSIsInN1ZmZpeCI6IjY5In1d");
});

